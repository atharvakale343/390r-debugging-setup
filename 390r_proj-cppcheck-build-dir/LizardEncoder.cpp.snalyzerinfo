CBoolPair
Init
SetTrueTrue
SetVal_as_Defined
CUncopyable
operator== call:[sizeof]
operator!=
IUnknown
StringToBstr call:[SysAllocString,return]
CMyComBSTR
CMyComBSTR call:[SysFreeString] noreturn:[SysFreeString]
operator&
operatorconstwchar_t*
Wipe_and_Free call:[Empty,SysStringLen,memset,sizeof] noreturn:[Empty]
CMyComBSTR call:[SysAllocString] noreturn:[SysAllocString]
operator= call:[SysAllocString,SysFreeString]
Len call:[SysStringLen] noreturn:[SysStringLen]
MyCopy call:[SysAllocStringLen,SysStringLen] noreturn:[SysAllocStringLen]
Empty call:[SysFreeString]
CMyComBSTR_Wipe
CMyComBSTR_Wipe call:[Wipe_and_Free] noreturn:[Wipe_and_Free]
CMyUnknownImp
CMyUnknownImp
CProps call:[clear] noreturn:[clear]
clear call:[memset,sizeof]
QueryInterface global:[IID_ICompressCoder,IID_ICompressSetCoderMt,IID_ICompressSetCoderProperties,IID_ICompressWriteCoderProperties,IID_IUnknown] call:[return] noreturn:[return]
AddRef
Release
MEM_check call:[sizeof]
MEM_32bits call:[sizeof]
MEM_64bits call:[sizeof]
MEM_isLittleEndian
MEM_read16 call:[memcpy,sizeof]
MEM_read32 call:[memcpy,sizeof]
MEM_read64 call:[memcpy,sizeof]
MEM_readST call:[memcpy,sizeof]
MEM_write16 call:[memcpy,sizeof] noreturn:[memcpy]
MEM_write32 call:[memcpy,sizeof] noreturn:[memcpy]
MEM_write64 call:[memcpy,sizeof] noreturn:[memcpy]
MEM_swap32 call:[return]
MEM_swap64 call:[return]
MEM_swapST call:[MEM_32bits,MEM_swap32,MEM_swap64,return] noreturn:[MEM_swap32,MEM_swap64]
MEM_readLE16 call:[MEM_isLittleEndian,MEM_read16,return] noreturn:[MEM_read16]
MEM_writeLE16 call:[MEM_isLittleEndian,MEM_write16] noreturn:[MEM_write16]
MEM_readLE24 call:[MEM_readLE16]
MEM_writeLE24 call:[MEM_writeLE16]
MEM_readLE32 call:[MEM_isLittleEndian,MEM_read32,MEM_swap32] noreturn:[MEM_read32,MEM_swap32]
MEM_writeLE32 call:[MEM_isLittleEndian,MEM_swap32,MEM_write32] noreturn:[MEM_write32]
MEM_readLE64 call:[MEM_isLittleEndian,MEM_read64,MEM_swap64] noreturn:[MEM_read64,MEM_swap64]
MEM_writeLE64 call:[MEM_isLittleEndian,MEM_swap64,MEM_write64] noreturn:[MEM_write64]
MEM_readLEST call:[MEM_32bits,MEM_readLE32,MEM_readLE64,return] noreturn:[MEM_readLE32,MEM_readLE64]
MEM_writeLEST call:[MEM_32bits,MEM_writeLE32,MEM_writeLE64] noreturn:[MEM_writeLE32,MEM_writeLE64]
MEM_readBE32 call:[MEM_isLittleEndian,MEM_read32,MEM_swap32] noreturn:[MEM_read32,MEM_swap32]
MEM_writeBE32 call:[MEM_isLittleEndian,MEM_swap32,MEM_write32] noreturn:[MEM_write32]
MEM_readBE64 call:[MEM_isLittleEndian,MEM_read64,MEM_swap64] noreturn:[MEM_read64,MEM_swap64]
MEM_writeBE64 call:[MEM_isLittleEndian,MEM_swap64,MEM_write64] noreturn:[MEM_write64]
MEM_readBEST call:[MEM_32bits,MEM_readBE32,MEM_readBE64,return] noreturn:[MEM_readBE32,MEM_readBE64]
MEM_writeBEST call:[MEM_32bits,MEM_writeBE32,MEM_writeBE64] noreturn:[MEM_writeBE32,MEM_writeBE64]
MEM_readMINMATCH call:[MEM_isLittleEndian,MEM_read32]
GetNumSystemThreads call:[return]
InitST
GetNumProcessThreads
CpuZero
CpuSet
IsCpuSet call:[return]
SetProcAffinity
Size call:[Size] noreturn:[Size]
IsEmpty call:[IsEmpty] noreturn:[IsEmpty]
ReserveDown call:[ReserveDown] noreturn:[ReserveDown]
ClearAndReserve call:[Clear,ClearAndReserve] noreturn:[ClearAndReserve]
CObjectVector
CObjectVector call:[AddInReserved,ConstructReserve,Size] noreturn:[AddInReserved]
operator= call:[AddInReserved,Clear,Reserve,Size] noreturn:[AddInReserved]
operator+= global:[k_VectorSizeMax] call:[AddInReserved,Reserve,Size] noreturn:[AddInReserved]
operator[]
operator[]
Front call:[operator[]] noreturn:[operator[]]
Front call:[operator[]] noreturn:[operator[]]
Back call:[Back] noreturn:[Back]
Back call:[Back] noreturn:[Back]
MoveToFront call:[MoveToFront] noreturn:[MoveToFront]
Add call:[AddInReserved,ReserveOnePosition] noreturn:[AddInReserved]
AddInReserved call:[AddInReserved,T] noreturn:[AddInReserved]
ReserveOnePosition call:[ReserveOnePosition] noreturn:[ReserveOnePosition]
AddInReserved_Ptr_of_new call:[AddInReserved] noreturn:[AddInReserved]
AddNew call:[AddInReserved,ReserveOnePosition]
AddNewInReserved call:[AddInReserved]
Insert call:[InsertInReserved,ReserveOnePosition,T] noreturn:[InsertInReserved]
InsertNew call:[InsertInReserved,ReserveOnePosition]
CObjectVector call:[Size,delete]
ClearAndFree call:[Clear,ClearAndFree] noreturn:[ClearAndFree]
Clear call:[Clear,Size,delete] noreturn:[Clear]
DeleteFrom call:[DeleteFrom,Size,delete] noreturn:[DeleteFrom]
DeleteFrontal call:[DeleteFrontal,delete] noreturn:[DeleteFrontal]
DeleteBack call:[Back,DeleteBack,delete] noreturn:[DeleteBack]
Delete call:[Delete,delete] noreturn:[Delete]
FindInSorted call:[Compare,Size,return]
AddToUniqueSorted call:[Compare,Insert,Size]
Sort call:[Sort] noreturn:[Sort]
CompareObjectItems call:[Compare,return] noreturn:[Compare]
Sort call:[Sort] noreturn:[Sort]
BOOLToBool call:[return] noreturn:[return]
BoolToVARIANT_BOOL call:[return] noreturn:[return]
VARIANT_BOOLToBool call:[return] noreturn:[return]
IsCreated call:[return]
CBaseEvent
CBaseEvent call:[Close] noreturn:[Close]
Close call:[Event_Close] noreturn:[Event_Close]
Set call:[Event_Set] noreturn:[Event_Set]
Reset call:[Event_Reset] noreturn:[Event_Reset]
Lock call:[Event_Wait] noreturn:[Event_Wait]
Create call:[ManualResetEvent_Create] noreturn:[ManualResetEvent_Create]
CreateIfNotCreated_Reset call:[IsCreated,ManualResetEvent_CreateNotSignaled,Reset] noreturn:[ManualResetEvent_CreateNotSignaled,Reset]
Create call:[AutoResetEvent_CreateNotSignaled] noreturn:[AutoResetEvent_CreateNotSignaled]
CreateIfNotCreated_Reset call:[AutoResetEvent_CreateNotSignaled,IsCreated,Reset] noreturn:[AutoResetEvent_CreateNotSignaled,Reset]
_CSemaphore
Close call:[Semaphore_Close] noreturn:[Semaphore_Close]
Create call:[Semaphore_Create] noreturn:[Semaphore_Create]
OptCreateInit call:[Semaphore_OptCreateInit] noreturn:[Semaphore_OptCreateInit]
Release call:[Semaphore_ReleaseN] noreturn:[Semaphore_ReleaseN]
Release call:[Semaphore_ReleaseN] noreturn:[Semaphore_ReleaseN]
Lock call:[Semaphore_Wait] noreturn:[Semaphore_Wait]
_CCriticalSection call:[CriticalSection_Init] noreturn:[CriticalSection_Init]
Enter call:[CriticalSection_Enter] noreturn:[CriticalSection_Enter]
Leave call:[CriticalSection_Leave] noreturn:[CriticalSection_Leave]
Unlock call:[Leave] noreturn:[Leave]
CCriticalSectionLock call:[Enter] noreturn:[Enter]
CCriticalSectionLock call:[Unlock] noreturn:[Unlock]
CSynchro
CSynchro call:[pthread_cond_destroy,pthread_mutex_destroy] noreturn:[pthread_cond_destroy]
Create call:[pthread_cond_init,pthread_mutex_init]
Enter call:[pthread_mutex_lock] noreturn:[pthread_mutex_lock]
Leave call:[pthread_mutex_unlock] noreturn:[pthread_mutex_unlock]
WaitCond call:[pthread_cond_wait] noreturn:[pthread_cond_wait]
LeaveAndSignal call:[pthread_cond_broadcast,pthread_mutex_unlock,return] noreturn:[return]
CBaseHandle_WFMO
operatorNWindows::NSynchronization::CBaseHandle_WFMO*
CBaseEvent_WFMO call:[Close] noreturn:[Close]
Close
Create
Set call:[Enter,LeaveAndSignal] noreturn:[LeaveAndSignal]
Reset call:[Enter,Leave] noreturn:[Leave]
IsSignaledAndUpdate
Create call:[Create] noreturn:[Create]
Create call:[Create] noreturn:[Create]
CreateIfNotCreated_Reset call:[Create] noreturn:[Create]
CSemaphore_WFMO
Close
Create
Release call:[Enter,Leave,LeaveAndSignal,return] noreturn:[LeaveAndSignal,return]
IsSignaledAndUpdate
Init
Reinit call:[Reinit] noreturn:[Reinit]
QueryInterface global:[IID_IUnknown] call:[return] noreturn:[return]
AddRef
Release
DProps call:[clear] noreturn:[clear]
clear call:[memset,sizeof]
QueryInterface global:[IID_ICompressCoder,IID_ICompressSetCoderMt,IID_ICompressSetDecoderProperties2,IID_ICompressSetInStream,IID_IUnknown] call:[return] noreturn:[return]
AddRef
Release
GetInputProcessedSize
CEncoder call:[clear] noreturn:[clear]
CEncoder call:[LIZARDMT_freeCCtx] noreturn:[LIZARDMT_freeCCtx]
SetCoderProperties call:[SetNumberOfThreads,clear,return] noreturn:[return]
WriteCoderProperties call:[WriteStream,sizeof] noreturn:[WriteStream]
Code call:[LIZARDMT_compressCCtx,LIZARDMT_createCCtx,LIZARDMT_isError,return] noreturn:[LIZARDMT_createCCtx,return]
SetNumberOfThreads call:[return] noreturn:[return]
MoveItems call:[memmove,sizeof] noreturn:[memmove]
ReAllocForNewCapacity call:[memcpy,sizeof] noreturn:[memcpy]
ReserveOnePosition global:[k_VectorSizeMax] call:[ReAllocForNewCapacity] noreturn:[ReAllocForNewCapacity]
CRecordVector < unsigned long long >
CRecordVector < unsigned long long > call:[Size,memcpy,sizeof] noreturn:[memcpy]
Size
IsEmpty
ConstructReserve
Reserve global:[k_VectorSizeMax] call:[ReAllocForNewCapacity] noreturn:[ReAllocForNewCapacity]
ChangeSize_KeepData call:[Reserve]
ClearAndReserve global:[k_VectorSizeMax] call:[Clear]
ClearAndSetSize call:[ClearAndReserve]
ReserveDown call:[memcpy,sizeof] noreturn:[memcpy]
CRecordVector < unsigned long long >
ClearAndFree
Clear
DeleteBack
DeleteFrom
DeleteFrontal call:[MoveItems]
Delete call:[MoveItems]
operator= call:[Size,memcpy,sizeof] noreturn:[memcpy]
operator+= global:[k_VectorSizeMax] call:[Reserve,Size,memcpy,sizeof]
Add call:[ReserveOnePosition]
AddInReserved
Insert call:[MoveItems,ReserveOnePosition]
InsertInReserved call:[MoveItems]
MoveToFront call:[memmove,sizeof]
operator[]
operator[]
Front
Front
Back
Back
FindInSorted call:[return]
FindInSorted2 call:[Compare,return]
FindInSorted call:[FindInSorted] noreturn:[FindInSorted]
FindInSorted2 call:[FindInSorted2] noreturn:[FindInSorted2]
AddToUniqueSorted call:[Insert]
AddToUniqueSorted2 call:[Compare,Insert]
SortRefDown call:[compare]
Sort call:[Front,SortRefDown,while] noreturn:[SortRefDown,while]
SortRefDown2 call:[Compare]
Sort2 call:[Front,SortRefDown2,while] noreturn:[SortRefDown2,while]
CMyComPtr < ICompressProgressInfo >
CMyComPtr < ICompressProgressInfo > call:[AddRef] noreturn:[AddRef]
CMyComPtr < ICompressProgressInfo > call:[AddRef] noreturn:[AddRef]
CMyComPtr < ICompressProgressInfo > call:[Release] noreturn:[Release]
Release call:[Release]
operatorT* call:[return]
operator&
operator.
operator= call:[AddRef,Release] noreturn:[AddRef,Release]
operator= call:[return] noreturn:[return]
operator! call:[return] noreturn:[return]
Attach call:[Release]
Detach
QueryInterface call:[QueryInterface] noreturn:[QueryInterface]
CMyComPtr < ISequentialInStream >
CMyComPtr < ISequentialInStream > call:[AddRef] noreturn:[AddRef]
CMyComPtr < ISequentialInStream > call:[AddRef] noreturn:[AddRef]
CMyComPtr < ISequentialInStream > call:[Release] noreturn:[Release]
Release call:[Release]
operatorT* call:[return]
operator&
operator.
operator= call:[AddRef,Release] noreturn:[AddRef,Release]
operator= call:[return] noreturn:[return]
operator! call:[return] noreturn:[return]
Attach call:[Release]
Detach
QueryInterface call:[QueryInterface] noreturn:[QueryInterface]
